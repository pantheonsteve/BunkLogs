# .github/workflows/deploy-production.yml
name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual triggers

env:
  PROJECT_ID: bunklogsauth
  REGION: us-central1
  BACKEND_SERVICE_NAME: bunk-logs-backend
  FRONTEND_BUCKET: bunk-logs-frontend-prod
  REGISTRY: us-central1-docker.pkg.dev

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_bunk_logs
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          pip install -r requirements/local.txt

      - name: Run backend tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_bunk_logs
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SETTINGS_MODULE: config.settings.test
          DJANGO_SECRET_KEY: test-secret-key
        run: |
          python manage.py test

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test

      - name: Build frontend
        working-directory: ./frontend
        env:
          VITE_API_URL: https://bunk-logs-backend-koumwfa74a-uc.a.run.app
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        run: npm run build

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker ${{ env.REGISTRY }}

      - name: Create environment variables file
        working-directory: ./backend
        run: |
          cat > env.yaml << EOF
          DEBUG: "False"
          GOOGLE_CLOUD_PROJECT: "${{ env.PROJECT_ID }}"
          USE_CLOUD_SQL_AUTH_PROXY: "True"
          GS_BUCKET_NAME: "bunk-logs-static"
          DJANGO_SETTINGS_MODULE: "config.settings.production_gcs"
          POSTGRES_USER: "stevebresnick"
          POSTGRES_HOST: "/cloudsql/bunklogsauth:us-central1:bunk-logs"
          POSTGRES_PORT: "5432"
          POSTGRES_DB: "bunk-logs-clc"
          DJANGO_ALLOWED_HOSTS: "bunklogs.net,*.run.app,bunk-logs-backend-koumwfa74a-uc.a.run.app,bunk-logs-backend-461994890254.us-central1.run.app"
          FRONTEND_URL: "https://bunklogs.net"
          EOF

      - name: Build and submit to Cloud Build
        working-directory: ./backend
        run: |
          echo "üèóÔ∏è Starting Cloud Build..."
          
          # Submit build asynchronously to avoid log streaming issues
          BUILD_OUTPUT=$(gcloud builds submit \
            --config cloudbuild.yaml \
            --async \
            . 2>&1)
          
          # Extract build ID from the output URL (more robust)
          BUILD_ID=$(echo "$BUILD_OUTPUT" | grep -o 'builds/[a-f0-9-]*' | head -1 | cut -d'/' -f2)
          
          if [ -z "$BUILD_ID" ]; then
            echo "‚ùå Failed to get build ID from output:"
            echo "$BUILD_OUTPUT"
            exit 1
          fi
          
          echo "‚úÖ Build submitted successfully with ID: $BUILD_ID"
          echo "üìã Build URL: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=$PROJECT_ID"
          
          # Poll for build completion