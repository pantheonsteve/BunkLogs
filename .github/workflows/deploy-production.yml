# .github/workflows/deploy-production.yml
name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual triggers

env:
  PROJECT_ID: bunklogsauth
  REGION: us-central1
  BACKEND_SERVICE_NAME: bunk-logs-backend
  FRONTEND_BUCKET: bunk-logs-frontend-prod
  REGISTRY: us-central1-docker.pkg.dev

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_bunk_logs
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          pip install -r requirements/local.txt

      - name: Run backend tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_bunk_logs
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SETTINGS_MODULE: config.settings.test
          DJANGO_SECRET_KEY: test-secret-key
        run: |
          python manage.py test

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test

      - name: Build frontend
        working-directory: ./frontend
        env:
          VITE_API_URL: https://bunk-logs-backend-koumwfa74a-uc.a.run.app
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        run: npm run build

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker ${{ env.REGISTRY }}

      - name: Create environment variables file
        working-directory: ./backend
        run: |
          cat > env.yaml << EOF
          DEBUG: "False"
          GOOGLE_CLOUD_PROJECT: "${{ env.PROJECT_ID }}"
          USE_CLOUD_SQL_AUTH_PROXY: "True"
          GS_BUCKET_NAME: "bunk-logs-static"
          DJANGO_SETTINGS_MODULE: "config.settings.production_gcs"
          POSTGRES_USER: "stevebresnick"
          POSTGRES_HOST: "/cloudsql/bunklogsauth:us-central1:bunk-logs"
          POSTGRES_PORT: "5432"
          POSTGRES_DB: "bunk-logs-clc"
          DJANGO_ALLOWED_HOSTS: "bunklogs.net,*.run.app,bunk-logs-backend-koumwfa74a-uc.a.run.app,bunk-logs-backend-461994890254.us-central1.run.app"
          FRONTEND_URL: "https://bunklogs.net"
          EOF

      - name: Build and submit to Cloud Build
        working-directory: ./backend
        run: |
          echo "üèóÔ∏è Starting Cloud Build..."
          
          # Submit build asynchronously to avoid log streaming issues
          BUILD_OUTPUT=$(gcloud builds submit \
            --config cloudbuild.yaml \
            --async \
            . 2>&1)
          
          # Extract build ID from the output URL (more robust)
          BUILD_ID=$(echo "$BUILD_OUTPUT" | grep -o 'builds/[a-f0-9-]*' | head -1 | cut -d'/' -f2)
          
          if [ -z "$BUILD_ID" ]; then
            echo "‚ùå Failed to get build ID from output:"
            echo "$BUILD_OUTPUT"
            exit 1
          fi
          
          echo "‚úÖ Build submitted successfully with ID: $BUILD_ID"
          echo "üìã Build URL: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=$PROJECT_ID"
          
          # Poll for build completion with better error handling
          echo "‚è≥ Waiting for build to complete..."
          TIMEOUT=1800  # 30 minutes
          ELAPSED=0
          POLL_INTERVAL=30
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            # Try to get build status with better error handling
            STATUS_OUTPUT=$(gcloud builds describe "$BUILD_ID" --format="value(status)" 2>&1)
            EXIT_CODE=$?
            
            if [ $EXIT_CODE -eq 0 ]; then
              STATUS="$STATUS_OUTPUT"
            else
              echo "‚ö†Ô∏è  Failed to get build status (${ELAPSED}s elapsed): $STATUS_OUTPUT"
              # If we can't get status, check if it's a permission issue
              if echo "$STATUS_OUTPUT" | grep -i "permission\|forbidden\|unauthorized" > /dev/null; then
                echo "üîë Permission issue detected. Trying alternative check..."
                # Try to list recent builds as a fallback
                RECENT_BUILDS=$(gcloud builds list --limit=5 --format="value(id,status)" 2>/dev/null | grep "$BUILD_ID" || echo "")
                if [ -n "$RECENT_BUILDS" ]; then
                  STATUS=$(echo "$RECENT_BUILDS" | awk '{print $2}')
                  echo "üìã Found build in recent list with status: $STATUS"
                else
                  STATUS="UNKNOWN"
                fi
              else
                STATUS="UNKNOWN"
              fi
            fi
            
            case $STATUS in
              "SUCCESS")
                echo "‚úÖ Build completed successfully!"
                echo "üê≥ Verifying container image..."
                if gcloud container images list-tags us-central1-docker.pkg.dev/$PROJECT_ID/bunk-logs/django --limit=3 --format="table(digest.slice(7:19),tags.list():label=TAGS,timestamp.date():label=CREATED)"; then
                  echo "‚úÖ Container image verified successfully!"
                else
                  echo "‚ö†Ô∏è  Could not verify container image, but build reported success"
                fi
                exit 0
                ;;
              "FAILURE"|"TIMEOUT"|"CANCELLED")
                echo "‚ùå Build failed with status: $STATUS"
                echo "üìã Check logs at: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=$PROJECT_ID"
                
                # Try to get some error details
                echo "üîç Attempting to get failure details..."
                gcloud builds describe "$BUILD_ID" --format="value(failureInfo.detail)" 2>/dev/null || echo "Could not retrieve failure details"
                exit 1
                ;;
              "WORKING"|"QUEUED")
                echo "üîÑ Build status: $STATUS (${ELAPSED}s elapsed)"
                ;;
              "UNKNOWN"|"")
                echo "‚ö†Ô∏è  Cannot determine build status (${ELAPSED}s elapsed)"
                echo "   This might be a permission issue, but the build may still be running"
                echo "   Check manually at: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=$PROJECT_ID"
                
                # After 10 minutes of unknown status, give alternative options
                if [ $ELAPSED -ge 600 ]; then
                  echo ""
                  echo "ü§î Build status has been unknown for over 10 minutes."
                  echo "   Options:"
                  echo "   1. Check the build manually in the Google Cloud Console"
                  echo "   2. The build might have completed successfully despite status check issues"
                  echo "   3. If the build completed, you can manually continue the deployment"
                  echo ""
                  
                  # Try to verify if image exists as a final check
                  echo "üîç Checking if container image exists..."
                  if gcloud container images list-tags us-central1-docker.pkg.dev/$PROJECT_ID/bunk-logs/django --limit=3 --filter="timestamp > -PT10M" --format="value(tags)" 2>/dev/null | grep -E "(latest|$(date +%Y%m%d))" > /dev/null; then
                    echo "‚úÖ Recent container image found! Build likely succeeded."
                    echo "   Continuing with deployment..."
                    exit 0
                  fi
                fi
                ;;
              *)
                echo "‚ùì Unexpected status: $STATUS (${ELAPSED}s elapsed)"
                ;;
            esac
            
            sleep $POLL_INTERVAL
            ELAPSED=$((ELAPSED + POLL_INTERVAL))
          done
          
          echo "‚ùå Build monitoring timed out after ${TIMEOUT} seconds"
          echo "üìã Check build status manually at: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=$PROJECT_ID"
          echo "üí° If the build completed successfully, you can re-run this workflow to continue"
          exit 1

      - name: Deploy to Cloud Run (no traffic)
        working-directory: ./backend
        run: |
          gcloud run deploy ${{ env.BACKEND_SERVICE_NAME }} \
            --image=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/bunk-logs/django:latest \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:bunk-logs \
            --port=8080 \
            --execution-environment=gen2 \
            --env-vars-file=env.yaml \
            --set-secrets="POSTGRES_PASSWORD=DB_PASSWORD:latest,DATABASE_URL=DATABASE_URL:latest,DJANGO_SECRET_KEY=DJANGO_SECRET_KEY:latest" \
            --max-instances=10 \
            --min-instances=0 \
            --memory=1Gi \
            --cpu=1 \
            --timeout=900 \
            --no-traffic

      - name: Run database migrations
        run: |
          gcloud run jobs execute migrate-job --region=${{ env.REGION }} --wait || \
          (
            echo "Migration job doesn't exist, creating and executing..."
            gcloud run jobs create migrate-job \
              --image=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/bunk-logs/django:latest \
              --region=${{ env.REGION }} \
              --task-timeout=900 \
              --max-retries=3 \
              --parallelism=1 \
              --cpu=1 \
              --memory=1Gi \
              --set-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:bunk-logs \
              --set-env-vars=DEBUG=False,GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }},USE_CLOUD_SQL_AUTH_PROXY=True,DJANGO_SETTINGS_MODULE=config.settings.production_gcs,POSTGRES_USER=stevebresnick,POSTGRES_HOST=/cloudsql/bunklogsauth:us-central1:bunk-logs,POSTGRES_PORT=5432,POSTGRES_DB=bunk-logs-clc \
              --set-secrets=POSTGRES_PASSWORD=DB_PASSWORD:latest,DATABASE_URL=DATABASE_URL:latest,DJANGO_SECRET_KEY=DJANGO_SECRET_KEY:latest \
              --command=python \
              --args=manage.py,migrate \
              --execute-now \
              --wait
          )

      - name: Collect static files
        run: |
          gcloud run jobs execute collectstatic-job --region=${{ env.REGION }} --wait || \
          (
            echo "Collectstatic job doesn't exist, creating and executing..."
            gcloud run jobs create collectstatic-job \
              --image=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/bunk-logs/django:latest \
              --region=${{ env.REGION }} \
              --task-timeout=900 \
              --max-retries=3 \
              --parallelism=1 \
              --cpu=1 \
              --memory=1Gi \
              --set-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:bunk-logs \
              --set-env-vars=DEBUG=False,GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }},USE_CLOUD_SQL_AUTH_PROXY=True,GS_BUCKET_NAME=bunk-logs-static,DJANGO_SETTINGS_MODULE=config.settings.production_gcs,POSTGRES_USER=stevebresnick,POSTGRES_HOST=/cloudsql/bunklogsauth:us-central1:bunk-logs,POSTGRES_PORT=5432,POSTGRES_DB=bunk-logs-clc \
              --set-secrets=POSTGRES_PASSWORD=DB_PASSWORD:latest,DATABASE_URL=DATABASE_URL:latest,DJANGO_SECRET_KEY=DJANGO_SECRET_KEY:latest \
              --command=python \
              --args=manage.py,collectstatic,--noinput \
              --execute-now \
              --wait
          )

      - name: Health check new revision (with diagnostics)
        run: |
          echo "üè• Performing health check with detailed diagnostics..."
          
          SERVICE_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          
          echo "üåê Service URL: $SERVICE_URL"
          
          # Wait longer for Django app to start
          echo "‚è≥ Waiting 120 seconds for Django application to start..."
          sleep 120
          
          # Test basic connectivity first
          echo "üîç Testing basic connectivity..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL" || echo "000")
          echo "HTTP Status for root URL: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" = "503" ]; then
            echo "‚ùå Service returning 503 - Application startup failure detected"
            echo ""
            echo "üîç Checking application logs for errors..."
            
            # Check logs with correct command
            echo "üìã Recent error logs:"
            gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=${{ env.BACKEND_SERVICE_NAME }} AND severity>=ERROR" \
              --limit=10 \
              --format="table(timestamp,severity,textPayload)" \
              --freshness=15m || echo "Could not retrieve error logs"
            
            echo ""
            echo "üìã Recent application logs:"
            gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=${{ env.BACKEND_SERVICE_NAME }}" \
              --limit=20 \
              --format="table(timestamp,severity,textPayload)" \
              --freshness=15m || echo "Could not retrieve application logs"
            
            echo ""
            echo "üîç Checking for common Django startup issues..."
            
            # Check service configuration
            echo "üìã Service configuration:"
            gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --format="table(spec.template.spec.containers[0].env[].name,spec.template.spec.containers[0].env[].value)"
            
            echo ""
            echo "üí° Common 503 causes:"
            echo "   1. Database connection failure (check DATABASE_URL secret)"
            echo "   2. Missing or incorrect environment variables"
            echo "   3. Django ALLOWED_HOSTS configuration"
            echo "   4. Application code errors during startup"
            echo "   5. Memory/CPU limits exceeded"
            
            echo ""
            echo "üîß Manual debugging steps:"
            echo "   1. Check logs: gcloud logging read 'resource.type=cloud_run_revision AND resource.labels.service_name=${{ env.BACKEND_SERVICE_NAME }}' --limit=50"
            echo "   2. Test locally: docker run your-image"
            echo "   3. Check secrets: gcloud secrets versions access latest --secret=DATABASE_URL"
            
            # Don't fail deployment - allow manual verification
            echo ""
            echo "‚ö†Ô∏è  Continuing deployment despite health check failure"
            echo "üîß Manual verification required at: $SERVICE_URL"
            
          elif [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "301" ] || [ "$HTTP_STATUS" = "302" ]; then
            echo "‚úÖ Basic connectivity successful (HTTP $HTTP_STATUS)"
            
            # Try API endpoints
            echo "üîç Testing API endpoints..."
            API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/api/schema/" || echo "000")
            echo "API Schema endpoint: HTTP $API_STATUS"
            
            if [ "$API_STATUS" = "200" ]; then
              echo "‚úÖ Health check passed completely!"
            else
              echo "‚ö†Ô∏è  Basic connectivity works but API endpoints may need time"
              echo "üîß Verify API at: $SERVICE_URL/api/schema/"
            fi
            
          else
            echo "‚ö†Ô∏è  Unexpected HTTP status: $HTTP_STATUS"
            echo "üîß Manual verification needed at: $SERVICE_URL"
          fi
          
          echo ""
          echo "üìã Service status summary:"
          gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="table(status.conditions[].type,status.conditions[].status)"
          
          # Always continue - don't fail deployment on health check
          exit 0

      - name: Switch traffic to new revision
        run: |
          echo "üîÄ Switching 100% traffic to new revision..."
          
          gcloud run services update-traffic ${{ env.BACKEND_SERVICE_NAME }} \
            --to-latest \
            --region=${{ env.REGION }}
          
          echo "‚úÖ Traffic switched successfully!"
          
          # Show service info
          SERVICE_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          
          echo "üåê Service URL: $SERVICE_URL"
          echo "üìã Current traffic allocation:"
          gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="table(status.traffic[].revisionName,status.traffic[].percent,status.traffic[].latestRevision)"

  deploy-frontend:
    needs: [test, deploy-backend]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        env:
          VITE_API_URL: https://bunk-logs-backend-koumwfa74a-uc.a.run.app
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        run: npm run build

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Create frontend bucket if not exists
        run: |
          gsutil ls gs://${{ env.FRONTEND_BUCKET }} || \
          (
            gsutil mb gs://${{ env.FRONTEND_BUCKET }}
            gsutil web set -m index.html -e 404.html gs://${{ env.FRONTEND_BUCKET }}
            gsutil iam ch allUsers:objectViewer gs://${{ env.FRONTEND_BUCKET }}
          )

      - name: Deploy frontend to Cloud Storage
        working-directory: ./frontend
        run: |
          # Deploy with cache-busting and proper headers
          gsutil -m rsync -r -d -c \
            -x '.*\.map$' \
            dist/ gs://${{ env.FRONTEND_BUCKET }}/
          
          # Set cache headers
          gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" \
            "gs://${{ env.FRONTEND_BUCKET }}/assets/**"
          
          gsutil -m setmeta -h "Cache-Control:public, max-age=3600" \
            "gs://${{ env.FRONTEND_BUCKET }}/index.html"

      - name: Setup Cloud CDN (if not exists)
        run: |
          # Check if CDN already exists
          if ! gcloud compute backend-buckets describe bunk-logs-frontend-backend --global 2>/dev/null; then
            echo "üåê Setting up Cloud CDN..."
            
            # Create backend bucket (no --global flag needed)
            echo "üì¶ Creating backend bucket..."
            gcloud compute backend-buckets create bunk-logs-frontend-backend \
              --gcs-bucket-name=${{ env.FRONTEND_BUCKET }} || echo "Backend bucket may already exist"
            
            # Create URL map
            echo "üó∫Ô∏è Creating URL map..."
            gcloud compute url-maps create bunk-logs-frontend-map \
              --default-backend-bucket=bunk-logs-frontend-backend \
              --global || echo "URL map may already exist"
            
            # Create managed SSL certificate
            echo "üîí Creating SSL certificate..."
            gcloud compute ssl-certificates create bunk-logs-frontend-ssl \
              --domains=bunklogs.net \
              --global || echo "SSL certificate may already exist"
            
            # Create HTTPS proxy
            echo "üîó Creating HTTPS proxy..."
            gcloud compute target-https-proxies create bunk-logs-frontend-proxy \
              --url-map=bunk-logs-frontend-map \
              --ssl-certificates=bunk-logs-frontend-ssl \
              --global || echo "HTTPS proxy may already exist"
            
            # Create forwarding rule
            echo "üì° Creating forwarding rule..."
            gcloud compute forwarding-rules create bunk-logs-frontend-forwarding-rule \
              --global \
              --target-https-proxy=bunk-logs-frontend-proxy \
              --ports=443 || echo "Forwarding rule may already exist"
            
            echo "‚úÖ CDN setup complete!"
            
            # Get the load balancer IP
            LB_IP=$(gcloud compute forwarding-rules describe bunk-logs-frontend-forwarding-rule --global --format="get(IPAddress)" || echo "Could not retrieve IP")
            if [ "$LB_IP" != "Could not retrieve IP" ]; then
              echo "üåê Load Balancer IP: $LB_IP"
              echo ""
              echo "üìã DNS Configuration Required:"
              echo "   Create an A record for bunklogs.net pointing to: $LB_IP"
              echo "   This may take a few minutes to propagate"
            fi
            
          else
            echo "‚úÖ CDN already exists, skipping setup."
            
            # Still show the IP for reference
            LB_IP=$(gcloud compute forwarding-rules describe bunk-logs-frontend-forwarding-rule --global --format="get(IPAddress)" 2>/dev/null || echo "Could not retrieve IP")
            if [ "$LB_IP" != "Could not retrieve IP" ]; then
              echo "üåê Current Load Balancer IP: $LB_IP"
            fi
          fi

      - name: Invalidate CDN cache
        run: |
          # Invalidate CDN cache for immediate updates
          gcloud compute url-maps invalidate-cdn-cache bunk-logs-frontend-map \
            --path="/*" \
            --global || echo "CDN cache invalidation failed, but deployment continues"

      - name: Frontend health check
        run: |
          echo "Frontend deployed to: https://storage.googleapis.com/${{ env.FRONTEND_BUCKET }}/index.html"
          
          # Basic health check
          if curl -f -s "https://storage.googleapis.com/${{ env.FRONTEND_BUCKET }}/index.html" > /dev/null; then
            echo "‚úÖ Frontend deployment successful!"
          else
            echo "‚ö†Ô∏è Frontend health check failed, but files were deployed"
          fi

  notify:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Deployment Summary
        run: |
          echo "üöÄ Deployment Summary:"
          echo "Backend: ${{ needs.deploy-backend.result }}"
          echo "Frontend: ${{ needs.deploy-frontend.result }}"
          echo ""
          echo "üåê Application URLs:"
          echo "Backend API: https://bunk-logs-backend-koumwfa74a-uc.a.run.app"
          echo "Frontend: https://bunklogs.net (after DNS configuration)"
          echo "Frontend (direct): https://storage.googleapis.com/${{ env.FRONTEND_BUCKET }}/index.html"