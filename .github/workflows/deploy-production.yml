# .github/workflows/deploy-production.yml
name: Deploy to Production (Bulletproof)

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: bunklogsauth
  REGION: us-central1
  BACKEND_SERVICE_NAME: bunk-logs-backend
  FRONTEND_BUCKET: bunk-logs-frontend-prod
  REGISTRY: us-central1-docker.pkg.dev

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_bunk_logs
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install backend dependencies
        working-directory: ./backend
        run: pip install -r requirements/local.txt

      - name: Run backend tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_bunk_logs
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SETTINGS_MODULE: config.settings.test
          DJANGO_SECRET_KEY: test-secret-key
        run: python manage.py test

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test -- --watchAll=false

      - name: Build frontend
        working-directory: ./frontend
        env:
          VITE_API_URL: https://bunk-logs-backend-koumwfa74a-uc.a.run.app
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        run: npm run build

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker ${{ env.REGISTRY }}

      - name: Create environment variables file
        working-directory: ./backend
        run: |
          cat > env.yaml << EOF
          DEBUG: "False"
          GOOGLE_CLOUD_PROJECT: "${{ env.PROJECT_ID }}"
          USE_CLOUD_SQL_AUTH_PROXY: "True"
          GS_BUCKET_NAME: "bunk-logs-static"
          DJANGO_SETTINGS_MODULE: "config.settings.production_gcs"
          POSTGRES_USER: "stevebresnick"
          POSTGRES_HOST: "/cloudsql/bunklogsauth:us-central1:bunk-logs"
          POSTGRES_PORT: "5432"
          POSTGRES_DB: "bunk-logs-clc"
          DJANGO_ALLOWED_HOSTS: "bunklogs.net,*.run.app,bunk-logs-backend-koumwfa74a-uc.a.run.app,bunk-logs-backend-461994890254.us-central1.run.app"
          FRONTEND_URL: "https://bunklogs.net"
          EOF

      - name: Build and submit to Cloud Build (Fixed)
        working-directory: ./backend
        run: |
          echo "üèóÔ∏è Starting Cloud Build..."
          
          # Submit build asynchronously
          BUILD_OUTPUT=$(gcloud builds submit --config cloudbuild.yaml --async . 2>&1)
          
          # Extract build ID from URL (robust method)
          BUILD_ID=$(echo "$BUILD_OUTPUT" | grep -o 'builds/[a-f0-9-]*' | head -1 | cut -d'/' -f2)
          
          if [ -z "$BUILD_ID" ]; then
            echo "‚ùå Failed to extract build ID from output:"
            echo "$BUILD_OUTPUT"
            exit 1
          fi
          
          echo "‚úÖ Build submitted with ID: $BUILD_ID"
          echo "üìã Monitor at: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=$PROJECT_ID"
          
          # Poll for completion with timeout
          echo "‚è≥ Waiting for build completion..."
          TIMEOUT=1800
          ELAPSED=0
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)" 2>/dev/null || echo "UNKNOWN")
            
            case $STATUS in
              "SUCCESS")
                echo "‚úÖ Build completed successfully!"
                break
                ;;
              "FAILURE"|"TIMEOUT"|"CANCELLED")
                echo "‚ùå Build failed with status: $STATUS"
                gcloud builds describe $BUILD_ID --format="value(failureInfo.detail)" 2>/dev/null || true
                exit 1
                ;;
              "WORKING"|"QUEUED")
                echo "üîÑ Build status: $STATUS (${ELAPSED}s elapsed)"
                ;;
              *)
                echo "‚ö†Ô∏è  Status: $STATUS (${ELAPSED}s elapsed)"
                ;;
            esac
            
            sleep 30
            ELAPSED=$((ELAPSED + 30))
          done
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "‚ùå Build timed out"
            exit 1
          fi

      - name: Deploy to Cloud Run (Fixed)
        working-directory: ./backend
        run: |
          echo "üöÄ Deploying to Cloud Run..."
          
          gcloud run deploy ${{ env.BACKEND_SERVICE_NAME }} \
            --image=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/bunk-logs/django:latest \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:bunk-logs \
            --port=8080 \
            --execution-environment=gen2 \
            --env-vars-file=env.yaml \
            --set-secrets="POSTGRES_PASSWORD=DB_PASSWORD:latest,DATABASE_URL=DATABASE_URL:latest,DJANGO_SECRET_KEY=DJANGO_SECRET_KEY:latest" \
            --max-instances=10 \
            --min-instances=0 \
            --memory=1Gi \
            --cpu=1 \
            --timeout=900 \
            --no-traffic

      - name: Run database migrations (Fixed)
        run: |
          echo "üîÑ Running migrations..."
          
          # Try to execute existing job first
          if gcloud run jobs execute migrate-job --region=${{ env.REGION }} --wait 2>/dev/null; then
            echo "‚úÖ Migrations completed using existing job"
          else
            echo "üì¶ Creating new migration job..."
            gcloud run jobs create migrate-job \
              --image=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/bunk-logs/django:latest \
              --region=${{ env.REGION }} \
              --task-timeout=900 \
              --max-retries=3 \
              --parallelism=1 \
              --cpu=1 \
              --memory=1Gi \
              --set-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:bunk-logs \
              --set-env-vars=DEBUG=False,GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }},USE_CLOUD_SQL_AUTH_PROXY=True,DJANGO_SETTINGS_MODULE=config.settings.production_gcs,POSTGRES_USER=stevebresnick,POSTGRES_HOST=/cloudsql/bunklogsauth:us-central1:bunk-logs,POSTGRES_PORT=5432,POSTGRES_DB=bunk-logs-clc \
              --set-secrets=POSTGRES_PASSWORD=DB_PASSWORD:latest,DATABASE_URL=DATABASE_URL:latest,DJANGO_SECRET_KEY=DJANGO_SECRET_KEY:latest \
              --command=python \
              --args=manage.py,migrate \
              --execute-now \
              --wait
          fi

      - name: Collect static files (Fixed)
        run: |
          echo "üìÅ Collecting static files..."
          
          # Try to execute existing job first
          if gcloud run jobs execute collectstatic-job --region=${{ env.REGION }} --wait 2>/dev/null; then
            echo "‚úÖ Static files collected using existing job"
          else
            echo "üì¶ Creating new collectstatic job..."
            gcloud run jobs create collectstatic-job \
              --image=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/bunk-logs/django:latest \
              --region=${{ env.REGION }} \
              --task-timeout=900 \
              --max-retries=3 \
              --parallelism=1 \
              --cpu=1 \
              --memory=1Gi \
              --set-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:bunk-logs \
              --set-env-vars=DEBUG=False,GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }},USE_CLOUD_SQL_AUTH_PROXY=True,GS_BUCKET_NAME=bunk-logs-static,DJANGO_SETTINGS_MODULE=config.settings.production_gcs,POSTGRES_USER=stevebresnick,POSTGRES_HOST=/cloudsql/bunklogsauth:us-central1:bunk-logs,POSTGRES_PORT=5432,POSTGRES_DB=bunk-logs-clc \
              --set-secrets=POSTGRES_PASSWORD=DB_PASSWORD:latest,DATABASE_URL=DATABASE_URL:latest,DJANGO_SECRET_KEY=DJANGO_SECRET_KEY:latest \
              --command=python \
              --args=manage.py,collectstatic,--noinput \
              --execute-now \
              --wait
          fi

      - name: Health check (Non-blocking)
        run: |
          echo "üè• Performing health check..."
          
          SERVICE_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          
          echo "üåê Service URL: $SERVICE_URL"
          echo "‚è≥ Waiting 90 seconds for service startup..."
          sleep 90
          
          # Test basic connectivity (non-blocking)
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL" --max-time 30 || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "301" ] || [ "$HTTP_STATUS" = "302" ]; then
            echo "‚úÖ Health check passed (HTTP $HTTP_STATUS)"
          else
            echo "‚ö†Ô∏è  Health check returned HTTP $HTTP_STATUS"
            echo "üîß Manual verification needed: $SERVICE_URL"
            echo "üìã Check logs: gcloud logging read 'resource.type=cloud_run_revision AND resource.labels.service_name=${{ env.BACKEND_SERVICE_NAME }}' --limit=20"
          fi

      - name: Switch traffic to new revision (Fixed)
        run: |
          echo "üîÄ Switching traffic to new revision..."
          
          gcloud run services update-traffic ${{ env.BACKEND_SERVICE_NAME }} \
            --to-latest \
            --region=${{ env.REGION }}
          
          echo "‚úÖ Traffic switched successfully!"
          
          SERVICE_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          
          echo "üåê Backend deployed at: $SERVICE_URL"

  deploy-frontend:
    needs: [test, deploy-backend]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        env:
          VITE_API_URL: https://bunk-logs-backend-koumwfa74a-uc.a.run.app
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        run: npm run build

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Create frontend bucket (Fixed)
        run: |
          echo "üì¶ Setting up frontend bucket..."
          
          # Create bucket if it doesn't exist
          if ! gsutil ls gs://${{ env.FRONTEND_BUCKET }} &>/dev/null; then
            gsutil mb gs://${{ env.FRONTEND_BUCKET }}
            echo "‚úÖ Created bucket"
          else
            echo "‚úÖ Bucket already exists"
          fi
          
          # Configure for web hosting
          gsutil web set -m index.html -e 404.html gs://${{ env.FRONTEND_BUCKET }}
          
          # Make publicly accessible
          gsutil iam ch allUsers:objectViewer gs://${{ env.FRONTEND_BUCKET }}
          
          echo "‚úÖ Bucket configured for web hosting"

      - name: Deploy frontend files
        working-directory: ./frontend
        run: |
          echo "üöÄ Deploying frontend files..."
          
          # Deploy with cache-busting
          gsutil -m rsync -r -d -c dist/ gs://${{ env.FRONTEND_BUCKET }}/
          
          # Set cache headers
          gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" \
            "gs://${{ env.FRONTEND_BUCKET }}/assets/**" || true
          
          gsutil -m setmeta -h "Cache-Control:public, max-age=3600" \
            "gs://${{ env.FRONTEND_BUCKET }}/index.html" || true
          
          echo "‚úÖ Frontend deployed successfully"

      - name: Setup CDN (Fixed with error handling)
        run: |
          echo "üåê Setting up CDN..."
          
          # Function to create resource if it doesn't exist
          create_resource_safe() {
            local resource_type="$1"
            local check_cmd="$2"
            local create_cmd="$3"
            
            if eval "$check_cmd" &>/dev/null; then
              echo "‚úÖ $resource_type already exists"
            else
              echo "üì¶ Creating $resource_type..."
              if eval "$create_cmd"; then
                echo "‚úÖ $resource_type created"
              else
                echo "‚ö†Ô∏è  Failed to create $resource_type (may already exist)"
              fi
            fi
          }
          
          # Create CDN resources safely
          create_resource_safe "Backend bucket" \
            "gcloud compute backend-buckets describe bunk-logs-frontend-backend --global" \
            "gcloud compute backend-buckets create bunk-logs-frontend-backend --gcs-bucket-name=${{ env.FRONTEND_BUCKET }}"
          
          create_resource_safe "URL map" \
            "gcloud compute url-maps describe bunk-logs-frontend-map --global" \
            "gcloud compute url-maps create bunk-logs-frontend-map --default-backend-bucket=bunk-logs-frontend-backend --global"
          
          create_resource_safe "SSL certificate" \
            "gcloud compute ssl-certificates describe bunk-logs-frontend-ssl --global" \
            "gcloud compute ssl-certificates create bunk-logs-frontend-ssl --domains=bunklogs.net --global"
          
          create_resource_safe "HTTPS proxy" \
            "gcloud compute target-https-proxies describe bunk-logs-frontend-proxy --global" \
            "gcloud compute target-https-proxies create bunk-logs-frontend-proxy --url-map=bunk-logs-frontend-map --ssl-certificates=bunk-logs-frontend-ssl --global"
          
          create_resource_safe "Forwarding rule" \
            "gcloud compute forwarding-rules describe bunk-logs-frontend-forwarding-rule --global" \
            "gcloud compute forwarding-rules create bunk-logs-frontend-forwarding-rule --global --target-https-proxy=bunk-logs-frontend-proxy --ports=443"

      - name: Get deployment info
        run: |
          echo "üéâ Deployment Summary"
          echo "==================="
          
          # Backend info
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          echo "üîß Backend API: $BACKEND_URL"
          
          # Frontend direct URL
          echo "üåê Frontend (direct): https://storage.googleapis.com/${{ env.FRONTEND_BUCKET }}/index.html"
          
          # Load balancer IP for DNS
          LB_IP=$(gcloud compute forwarding-rules describe bunk-logs-frontend-forwarding-rule --global --format="get(IPAddress)" 2>/dev/null || echo "Not available yet")
          if [ "$LB_IP" != "Not available yet" ]; then
            echo "üìç Load Balancer IP: $LB_IP"
            echo "üìã DNS: Create A record for bunklogs.net ‚Üí $LB_IP"
          fi
          
          # SSL certificate status
          echo "üîí SSL Certificate Status:"
          gcloud compute ssl-certificates describe bunk-logs-frontend-ssl --global --format="table(name,managed.status)" 2>/dev/null || echo "Still provisioning..."
          
          echo ""
          echo "‚úÖ Deployment completed successfully!"
          echo "üîß If health checks failed, manually verify: $BACKEND_URL"