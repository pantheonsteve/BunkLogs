openapi: 3.0.3
info:
  title: Bunk Logs API
  version: 1.0.0
  description: Documentation of API endpoints of Bunk Logs
paths:
  /api/auth-token/:
    post:
      operationId: authTokenCreate
      tags:
      - auth-token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /api/auth/google/:
    get:
      operationId: authGoogleRetrieve
      description: Initiate Google OAuth flow
      summary: Google Login (OAuth Flow)
      tags:
      - auth
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: Authorization URL returned
        '500':
          description: Server error
  /api/auth/google/callback/:
    get:
      operationId: authGoogleCallbackRetrieve
      description: Handle Google OAuth callback with authorization code
      summary: Google OAuth Callback Handler
      parameters:
      - in: query
        name: code
        schema:
          type: string
        description: Authorization code from Google
      - in: query
        name: error
        schema:
          type: string
        description: Error message from Google (if any)
      tags:
      - auth
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '302':
          description: Redirect to frontend with tokens
        '400':
          description: Bad request or missing authorization code
        '500':
          description: Server error or Google authentication not configured
  /api/auth/google/callback/token/:
    post:
      operationId: authGoogleCallbackTokenCreate
      description: Handle callback during redirect auth flow
      summary: Google Login Callback (POST)
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: Authorization code from Google
              required:
              - code
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: Login successful
        '400':
          description: Bad request or login failed
        '500':
          description: Google authentication not configured
  /api/auth/token/:
    post:
      operationId: authTokenCreate2
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomTokenObtainPair'
          description: ''
  /api/auth/token/refresh/:
    post:
      operationId: authTokenRefreshCreate
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/token/verify/:
    post:
      operationId: authTokenVerifyCreate
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/item-categories/:
    get:
      operationId: itemCategoriesList
      description: |-
        ViewSet for ItemCategory model.
        - GET /api/item-categories/ - List all categories
        - GET /api/item-categories/{id}/ - Retrieve specific category
        - POST /api/item-categories/ - Create new category (staff only)
        - PUT /api/item-categories/{id}/ - Update category (staff only)
        - DELETE /api/item-categories/{id}/ - Delete category (staff only)
      tags:
      - item-categories
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemCategory'
          description: ''
    post:
      operationId: itemCategoriesCreate
      description: |-
        ViewSet for ItemCategory model.
        - GET /api/item-categories/ - List all categories
        - GET /api/item-categories/{id}/ - Retrieve specific category
        - POST /api/item-categories/ - Create new category (staff only)
        - PUT /api/item-categories/{id}/ - Update category (staff only)
        - DELETE /api/item-categories/{id}/ - Delete category (staff only)
      tags:
      - item-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ItemCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ItemCategory'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemCategory'
          description: ''
  /api/item-categories/{id}/:
    get:
      operationId: itemCategoriesRetrieve
      description: |-
        ViewSet for ItemCategory model.
        - GET /api/item-categories/ - List all categories
        - GET /api/item-categories/{id}/ - Retrieve specific category
        - POST /api/item-categories/ - Create new category (staff only)
        - PUT /api/item-categories/{id}/ - Update category (staff only)
        - DELETE /api/item-categories/{id}/ - Delete category (staff only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Item Category.
        required: true
      tags:
      - item-categories
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemCategory'
          description: ''
    put:
      operationId: itemCategoriesUpdate
      description: |-
        ViewSet for ItemCategory model.
        - GET /api/item-categories/ - List all categories
        - GET /api/item-categories/{id}/ - Retrieve specific category
        - POST /api/item-categories/ - Create new category (staff only)
        - PUT /api/item-categories/{id}/ - Update category (staff only)
        - DELETE /api/item-categories/{id}/ - Delete category (staff only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Item Category.
        required: true
      tags:
      - item-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ItemCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ItemCategory'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemCategory'
          description: ''
    patch:
      operationId: itemCategoriesPartialUpdate
      description: |-
        ViewSet for ItemCategory model.
        - GET /api/item-categories/ - List all categories
        - GET /api/item-categories/{id}/ - Retrieve specific category
        - POST /api/item-categories/ - Create new category (staff only)
        - PUT /api/item-categories/{id}/ - Update category (staff only)
        - DELETE /api/item-categories/{id}/ - Delete category (staff only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Item Category.
        required: true
      tags:
      - item-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedItemCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedItemCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedItemCategory'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemCategory'
          description: ''
    delete:
      operationId: itemCategoriesDestroy
      description: |-
        ViewSet for ItemCategory model.
        - GET /api/item-categories/ - List all categories
        - GET /api/item-categories/{id}/ - Retrieve specific category
        - POST /api/item-categories/ - Create new category (staff only)
        - PUT /api/item-categories/{id}/ - Update category (staff only)
        - DELETE /api/item-categories/{id}/ - Delete category (staff only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Item Category.
        required: true
      tags:
      - item-categories
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/items/:
    get:
      operationId: itemsList
      description: |-
        ViewSet for Item model.
        - GET /api/items/ - List all available items
        - GET /api/items/{id}/ - Retrieve specific item
        - POST /api/items/ - Create new item (staff only)
        - PUT /api/items/{id}/ - Update item (staff only)
        - DELETE /api/items/{id}/ - Delete item (staff only)
      tags:
      - items
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
          description: ''
    post:
      operationId: itemsCreate
      description: |-
        ViewSet for Item model.
        - GET /api/items/ - List all available items
        - GET /api/items/{id}/ - Retrieve specific item
        - POST /api/items/ - Create new item (staff only)
        - PUT /api/items/{id}/ - Update item (staff only)
        - DELETE /api/items/{id}/ - Delete item (staff only)
      tags:
      - items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Item'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: ''
  /api/items/{id}/:
    get:
      operationId: itemsRetrieve
      description: |-
        ViewSet for Item model.
        - GET /api/items/ - List all available items
        - GET /api/items/{id}/ - Retrieve specific item
        - POST /api/items/ - Create new item (staff only)
        - PUT /api/items/{id}/ - Update item (staff only)
        - DELETE /api/items/{id}/ - Delete item (staff only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Item.
        required: true
      tags:
      - items
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: ''
    put:
      operationId: itemsUpdate
      description: |-
        ViewSet for Item model.
        - GET /api/items/ - List all available items
        - GET /api/items/{id}/ - Retrieve specific item
        - POST /api/items/ - Create new item (staff only)
        - PUT /api/items/{id}/ - Update item (staff only)
        - DELETE /api/items/{id}/ - Delete item (staff only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Item.
        required: true
      tags:
      - items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Item'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: ''
    patch:
      operationId: itemsPartialUpdate
      description: |-
        ViewSet for Item model.
        - GET /api/items/ - List all available items
        - GET /api/items/{id}/ - Retrieve specific item
        - POST /api/items/ - Create new item (staff only)
        - PUT /api/items/{id}/ - Update item (staff only)
        - DELETE /api/items/{id}/ - Delete item (staff only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Item.
        required: true
      tags:
      - items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedItem'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: ''
    delete:
      operationId: itemsDestroy
      description: |-
        ViewSet for Item model.
        - GET /api/items/ - List all available items
        - GET /api/items/{id}/ - Retrieve specific item
        - POST /api/items/ - Create new item (staff only)
        - PUT /api/items/{id}/ - Update item (staff only)
        - DELETE /api/items/{id}/ - Delete item (staff only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Item.
        required: true
      tags:
      - items
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/order-types/:
    get:
      operationId: orderTypesList
      description: |-
        ViewSet for OrderType model.
        - GET /api/order-types/ - List all order types
        - GET /api/order-types/{id}/ - Retrieve specific order type
        - POST /api/order-types/ - Create new order type (staff only)
        - PUT /api/order-types/{id}/ - Update order type (staff only)
        - DELETE /api/order-types/{id}/ - Delete order type (staff only)
      tags:
      - order-types
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderType'
          description: ''
    post:
      operationId: orderTypesCreate
      description: |-
        ViewSet for OrderType model.
        - GET /api/order-types/ - List all order types
        - GET /api/order-types/{id}/ - Retrieve specific order type
        - POST /api/order-types/ - Create new order type (staff only)
        - PUT /api/order-types/{id}/ - Update order type (staff only)
        - DELETE /api/order-types/{id}/ - Delete order type (staff only)
      tags:
      - order-types
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderType'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderType'
          description: ''
  /api/order-types/{orderTypeId}/items/:
    get:
      operationId: orderTypesItemsRetrieve
      description: Get available items for a specific order type. Returns items from
        categories associated with the order type.
      summary: Get items for order type
      parameters:
      - in: path
        name: orderTypeId
        schema:
          type: integer
        required: true
      - in: query
        name: order_type_id
        schema:
          type: integer
        description: Order type ID
        required: true
      tags:
      - order-types
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: Items retrieved successfully
        '404':
          description: Order type not found
  /api/order-types/{id}/:
    get:
      operationId: orderTypesRetrieve
      description: |-
        ViewSet for OrderType model.
        - GET /api/order-types/ - List all order types
        - GET /api/order-types/{id}/ - Retrieve specific order type
        - POST /api/order-types/ - Create new order type (staff only)
        - PUT /api/order-types/{id}/ - Update order type (staff only)
        - DELETE /api/order-types/{id}/ - Delete order type (staff only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Order Type.
        required: true
      tags:
      - order-types
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderType'
          description: ''
    put:
      operationId: orderTypesUpdate
      description: |-
        ViewSet for OrderType model.
        - GET /api/order-types/ - List all order types
        - GET /api/order-types/{id}/ - Retrieve specific order type
        - POST /api/order-types/ - Create new order type (staff only)
        - PUT /api/order-types/{id}/ - Update order type (staff only)
        - DELETE /api/order-types/{id}/ - Delete order type (staff only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Order Type.
        required: true
      tags:
      - order-types
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderType'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderType'
          description: ''
    patch:
      operationId: orderTypesPartialUpdate
      description: |-
        ViewSet for OrderType model.
        - GET /api/order-types/ - List all order types
        - GET /api/order-types/{id}/ - Retrieve specific order type
        - POST /api/order-types/ - Create new order type (staff only)
        - PUT /api/order-types/{id}/ - Update order type (staff only)
        - DELETE /api/order-types/{id}/ - Delete order type (staff only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Order Type.
        required: true
      tags:
      - order-types
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrderType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrderType'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrderType'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderType'
          description: ''
    delete:
      operationId: orderTypesDestroy
      description: |-
        ViewSet for OrderType model.
        - GET /api/order-types/ - List all order types
        - GET /api/order-types/{id}/ - Retrieve specific order type
        - POST /api/order-types/ - Create new order type (staff only)
        - PUT /api/order-types/{id}/ - Update order type (staff only)
        - DELETE /api/order-types/{id}/ - Delete order type (staff only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Order Type.
        required: true
      tags:
      - order-types
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/orders/:
    get:
      operationId: ordersList
      description: |-
        ViewSet for Order model with CRUD operations.
        - GET /api/orders/ - List all orders
        - GET /api/orders/{id}/ - Retrieve specific order
        - POST /api/orders/ - Create new order
        - PUT /api/orders/{id}/ - Update order
        - DELETE /api/orders/{id}/ - Delete order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Order ID
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: ''
    post:
      operationId: ordersCreate
      description: |-
        ViewSet for Order model with CRUD operations.
        - GET /api/orders/ - List all orders
        - GET /api/orders/{id}/ - Retrieve specific order
        - POST /api/orders/ - Create new order
        - PUT /api/orders/{id}/ - Update order
        - DELETE /api/orders/{id}/ - Delete order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Order ID
        required: true
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderCreate'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreate'
          description: ''
  /api/orders/{id}/:
    get:
      operationId: ordersRetrieve
      description: |-
        ViewSet for Order model with CRUD operations.
        - GET /api/orders/ - List all orders
        - GET /api/orders/{id}/ - Retrieve specific order
        - POST /api/orders/ - Create new order
        - PUT /api/orders/{id}/ - Update order
        - DELETE /api/orders/{id}/ - Delete order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Order ID
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: ordersUpdate
      description: |-
        ViewSet for Order model with CRUD operations.
        - GET /api/orders/ - List all orders
        - GET /api/orders/{id}/ - Retrieve specific order
        - POST /api/orders/ - Create new order
        - PUT /api/orders/{id}/ - Update order
        - DELETE /api/orders/{id}/ - Delete order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Order ID
        required: true
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    patch:
      operationId: ordersPartialUpdate
      description: |-
        ViewSet for Order model with CRUD operations.
        - GET /api/orders/ - List all orders
        - GET /api/orders/{id}/ - Retrieve specific order
        - POST /api/orders/ - Create new order
        - PUT /api/orders/{id}/ - Update order
        - DELETE /api/orders/{id}/ - Delete order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Order ID
        required: true
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    delete:
      operationId: ordersDestroy
      description: |-
        ViewSet for Order model with CRUD operations.
        - GET /api/orders/ - List all orders
        - GET /api/orders/{id}/ - Retrieve specific order
        - POST /api/orders/ - Create new order
        - PUT /api/orders/{id}/ - Update order
        - DELETE /api/orders/{id}/ - Delete order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: Order ID
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/orders/statistics/:
    get:
      operationId: ordersStatisticsRetrieve
      description: Get statistics about orders.
      summary: Get order statistics
      tags:
      - orders
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: Order statistics retrieved successfully
  /api/schema/:
    get:
      operationId: schemaRetrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/users/:
    get:
      operationId: usersList
      description: |-
        ViewSet for User model.
        - GET /api/users/ - List all users (staff only)
        - GET /api/users/{id}/ - Retrieve specific user
        - GET /api/users/me/ - Get current user details
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
  /api/users/{id}/:
    get:
      operationId: usersRetrieve
      description: |-
        ViewSet for User model.
        - GET /api/users/ - List all users (staff only)
        - GET /api/users/{id}/ - Retrieve specific user
        - GET /api/users/me/ - Get current user details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/me/:
    get:
      operationId: usersMeRetrieve
      description: Return current user details.
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/v1/bunk/{id}/:
    get:
      operationId: v1BunkRetrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bunk'
          description: ''
  /api/v1/bunklogs/:
    get:
      operationId: v1BunklogsList
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BunkLog'
          description: ''
    post:
      operationId: v1BunklogsCreate
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BunkLog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BunkLog'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BunkLog'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BunkLog'
          description: ''
  /api/v1/bunklogs/{bunkId}/logs/{date}/:
    get:
      operationId: v1BunklogsLogsRetrieve
      description: API view to get bunk logs info by date. The endpoint searches for
        all of the bunk assignments for the bunk on that date, then searches for all
        of the bunk logs for those assignments.
      summary: Get bunk logs by date
      parameters:
      - in: path
        name: bunkId
        schema:
          type: string
        required: true
      - in: query
        name: bunk_id
        schema:
          type: string
        description: Bunk ID
        required: true
      - in: path
        name: date
        schema:
          type: string
        required: true
      - in: query
        name: date
        schema:
          type: string
          format: date
        description: Date in YYYY-MM-DD format
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: Bunk logs data retrieved successfully
        '403':
          description: Permission denied
        '404':
          description: Bunk not found
  /api/v1/bunklogs/{id}/:
    get:
      operationId: v1BunklogsRetrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bunk log.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BunkLog'
          description: ''
    put:
      operationId: v1BunklogsUpdate
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bunk log.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BunkLog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BunkLog'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BunkLog'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BunkLog'
          description: ''
    patch:
      operationId: v1BunklogsPartialUpdate
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bunk log.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBunkLog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBunkLog'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBunkLog'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BunkLog'
          description: ''
    delete:
      operationId: v1BunklogsDestroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bunk log.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/bunks/:
    get:
      operationId: v1BunksList
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bunk'
          description: ''
    post:
      operationId: v1BunksCreate
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bunk'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Bunk'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Bunk'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bunk'
          description: ''
  /api/v1/bunks/{id}/:
    get:
      operationId: v1BunksRetrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bunk.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bunk'
          description: ''
    put:
      operationId: v1BunksUpdate
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bunk.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bunk'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Bunk'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Bunk'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bunk'
          description: ''
    patch:
      operationId: v1BunksPartialUpdate
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bunk.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBunk'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBunk'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBunk'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bunk'
          description: ''
    delete:
      operationId: v1BunksDestroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bunk.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/camper-bunk-assignments/:
    get:
      operationId: v1CamperBunkAssignmentsList
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CamperBunkAssignment'
          description: ''
    post:
      operationId: v1CamperBunkAssignmentsCreate
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CamperBunkAssignment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CamperBunkAssignment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CamperBunkAssignment'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamperBunkAssignment'
          description: ''
  /api/v1/camper-bunk-assignments/{id}/:
    get:
      operationId: v1CamperBunkAssignmentsRetrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this camper bunk assignment.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamperBunkAssignment'
          description: ''
    put:
      operationId: v1CamperBunkAssignmentsUpdate
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this camper bunk assignment.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CamperBunkAssignment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CamperBunkAssignment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CamperBunkAssignment'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamperBunkAssignment'
          description: ''
    patch:
      operationId: v1CamperBunkAssignmentsPartialUpdate
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this camper bunk assignment.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCamperBunkAssignment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCamperBunkAssignment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCamperBunkAssignment'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamperBunkAssignment'
          description: ''
    delete:
      operationId: v1CamperBunkAssignmentsDestroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this camper bunk assignment.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/campercare/{camperCareId}/{date}/:
    get:
      operationId: v1CampercareRetrieve
      description: Get all bunks managed by a specific camper care team member with
        counselors and campers.
      summary: Get camper care bunks
      parameters:
      - in: path
        name: camperCareId
        schema:
          type: string
        required: true
      - in: query
        name: camper_care_id
        schema:
          type: string
        description: Camper care user ID
        required: true
      - in: path
        name: date
        schema:
          type: string
        required: true
      - in: query
        name: date
        schema:
          type: string
          format: date
        description: Date in YYYY-MM-DD format
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: Camper care bunks data retrieved successfully
        '403':
          description: Permission denied
        '404':
          description: No unit found for this camper care team member
  /api/v1/campers/:
    get:
      operationId: v1CampersList
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Camper'
          description: ''
    post:
      operationId: v1CampersCreate
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Camper'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Camper'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Camper'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camper'
          description: ''
  /api/v1/campers/{camperId}/logs/:
    get:
      operationId: v1CampersLogsRetrieve
      parameters:
      - in: path
        name: camperId
        schema:
          type: string
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BunkLog'
          description: ''
  /api/v1/campers/{id}/:
    get:
      operationId: v1CampersRetrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this camper.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camper'
          description: ''
    put:
      operationId: v1CampersUpdate
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this camper.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Camper'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Camper'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Camper'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camper'
          description: ''
    patch:
      operationId: v1CampersPartialUpdate
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this camper.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCamper'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCamper'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCamper'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camper'
          description: ''
    delete:
      operationId: v1CampersDestroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this camper.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/debug/fix-social-apps/:
    get:
      operationId: v1DebugFixSocialAppsRetrieve
      description: 'Diagnostic endpoint to fix MultipleObjectsReturned error with
        Google OAuth. GET: List all SocialApp entries for Google. POST: Keep only
        the most recent app and delete duplicates'
      summary: Fix social authentication apps
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialAppDiagnosticResponse'
          description: Social apps diagnostic information or fix completed
        '403':
          description: Forbidden - Staff access required
    post:
      operationId: v1DebugFixSocialAppsCreate
      description: 'Diagnostic endpoint to fix MultipleObjectsReturned error with
        Google OAuth. POST: Keep only the most recent app and delete duplicates'
      summary: Fix social authentication apps
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialAppDiagnosticResponse'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SocialAppDiagnosticResponse'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialAppDiagnosticResponse'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialAppDiagnosticResponse'
          description: Social apps diagnostic information or fix completed
        '403':
          description: Forbidden - Staff access required
  /api/v1/debug/user-bunks/:
    get:
      operationId: v1DebugUserBunksRetrieve
      description: Temporary debug endpoint to check user-bunk relationships
      summary: Debug user bunks
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: User-bunk relationship data retrieved successfully
  /api/v1/unit-staff-assignments/:
    get:
      operationId: v1UnitStaffAssignmentsList
      description: |-
        ViewSet for UnitStaffAssignment model.
        - GET /api/unit-staff-assignments/ - List all assignments
        - POST /api/unit-staff-assignments/ - Create new assignment
        - GET /api/unit-staff-assignments/{id}/ - Retrieve specific assignment
        - PUT /api/unit-staff-assignments/{id}/ - Update assignment
        - DELETE /api/unit-staff-assignments/{id}/ - Delete assignment
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnitStaffAssignment'
          description: ''
    post:
      operationId: v1UnitStaffAssignmentsCreate
      description: |-
        ViewSet for UnitStaffAssignment model.
        - GET /api/unit-staff-assignments/ - List all assignments
        - POST /api/unit-staff-assignments/ - Create new assignment
        - GET /api/unit-staff-assignments/{id}/ - Retrieve specific assignment
        - PUT /api/unit-staff-assignments/{id}/ - Update assignment
        - DELETE /api/unit-staff-assignments/{id}/ - Delete assignment
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitStaffAssignment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UnitStaffAssignment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UnitStaffAssignment'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitStaffAssignment'
          description: ''
  /api/v1/unit-staff-assignments/{id}/:
    get:
      operationId: v1UnitStaffAssignmentsRetrieve
      description: |-
        ViewSet for UnitStaffAssignment model.
        - GET /api/unit-staff-assignments/ - List all assignments
        - POST /api/unit-staff-assignments/ - Create new assignment
        - GET /api/unit-staff-assignments/{id}/ - Retrieve specific assignment
        - PUT /api/unit-staff-assignments/{id}/ - Update assignment
        - DELETE /api/unit-staff-assignments/{id}/ - Delete assignment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this unit staff assignment.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitStaffAssignment'
          description: ''
    put:
      operationId: v1UnitStaffAssignmentsUpdate
      description: |-
        ViewSet for UnitStaffAssignment model.
        - GET /api/unit-staff-assignments/ - List all assignments
        - POST /api/unit-staff-assignments/ - Create new assignment
        - GET /api/unit-staff-assignments/{id}/ - Retrieve specific assignment
        - PUT /api/unit-staff-assignments/{id}/ - Update assignment
        - DELETE /api/unit-staff-assignments/{id}/ - Delete assignment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this unit staff assignment.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitStaffAssignment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UnitStaffAssignment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UnitStaffAssignment'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitStaffAssignment'
          description: ''
    patch:
      operationId: v1UnitStaffAssignmentsPartialUpdate
      description: |-
        ViewSet for UnitStaffAssignment model.
        - GET /api/unit-staff-assignments/ - List all assignments
        - POST /api/unit-staff-assignments/ - Create new assignment
        - GET /api/unit-staff-assignments/{id}/ - Retrieve specific assignment
        - PUT /api/unit-staff-assignments/{id}/ - Update assignment
        - DELETE /api/unit-staff-assignments/{id}/ - Delete assignment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this unit staff assignment.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUnitStaffAssignment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUnitStaffAssignment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUnitStaffAssignment'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitStaffAssignment'
          description: ''
    delete:
      operationId: v1UnitStaffAssignmentsDestroy
      description: |-
        ViewSet for UnitStaffAssignment model.
        - GET /api/unit-staff-assignments/ - List all assignments
        - POST /api/unit-staff-assignments/ - Create new assignment
        - GET /api/unit-staff-assignments/{id}/ - Retrieve specific assignment
        - PUT /api/unit-staff-assignments/{id}/ - Update assignment
        - DELETE /api/unit-staff-assignments/{id}/ - Delete assignment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this unit staff assignment.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/unithead/{unitheadId}/{date}/:
    get:
      operationId: v1UnitheadRetrieve
      description: Get all bunks managed by a specific unit head with counselors and
        campers.
      summary: Get unit head bunks
      parameters:
      - in: path
        name: date
        schema:
          type: string
        required: true
      - in: query
        name: date
        schema:
          type: string
          format: date
        description: Date in YYYY-MM-DD format
        required: true
      - in: path
        name: unitheadId
        schema:
          type: string
        required: true
      - in: query
        name: unithead_id
        schema:
          type: string
        description: Unit head user ID
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: Unit head bunks data retrieved successfully
        '403':
          description: Permission denied
        '404':
          description: No unit found for this unit head
  /api/v1/units/:
    get:
      operationId: v1UnitsList
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
          description: ''
    post:
      operationId: v1UnitsCreate
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Unit'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Unit'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
          description: ''
  /api/v1/units/{id}/:
    get:
      operationId: v1UnitsRetrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this unit.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
          description: ''
    put:
      operationId: v1UnitsUpdate
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this unit.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Unit'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Unit'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
          description: ''
    patch:
      operationId: v1UnitsPartialUpdate
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this unit.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUnit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUnit'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUnit'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
          description: ''
    delete:
      operationId: v1UnitsDestroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this unit.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/units/{id}/assign_staff/:
    post:
      operationId: v1UnitsAssignStaffCreate
      description: Assign staff member to unit with specific role.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this unit.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Unit'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Unit'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
          description: ''
  /api/v1/units/{id}/remove_staff/:
    delete:
      operationId: v1UnitsRemoveStaffDestroy
      description: Remove staff assignment from unit.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this unit.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/users/:
    get:
      operationId: v1UsersList
      description: Custom User Details View to ensure JSON response
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiUser'
          description: ''
  /api/v1/users/{id}/:
    get:
      operationId: v1UsersRetrieve
      description: Custom User Details View to ensure JSON response
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
          description: ''
  /api/v1/users/create/:
    post:
      operationId: v1UsersCreateCreate
      description: User registration view.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ApiUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ApiUser'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
          description: ''
  /api/v1/users/email/{email}/:
    get:
      operationId: v1UsersEmailRetrieve
      description: Endpoint to get user details by email.
      summary: Get user by email
      parameters:
      - in: path
        name: email
        schema:
          type: string
        required: true
      - in: query
        name: email
        schema:
          type: string
        description: User email address
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
          description: User details retrieved successfully
        '404':
          description: User not found
components:
  schemas:
    ApiUser:
      type: object
      properties:
        first_name:
          type: string
          title: First Name of User
          maxLength: 255
        last_name:
          type: string
          title: Last Name of User
          maxLength: 255
        role:
          oneOf:
          - $ref: '#/components/schemas/UserRoleEnum'
          - $ref: '#/components/schemas/BlankEnum'
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        profile_complete:
          type: boolean
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        is_staff:
          type: boolean
          readOnly: true
          title: Staff status
          description: Designates whether the user can log into this admin site.
        is_superuser:
          type: boolean
          readOnly: true
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        date_joined:
          type: string
          format: date-time
        bunks:
          type: object
          additionalProperties: {}
          readOnly: true
        unit:
          type: object
          additionalProperties: {}
          readOnly: true
        unit_bunks:
          type: object
          additionalProperties: {}
          readOnly: true
        password:
          type: string
          writeOnly: true
          maxLength: 128
      required:
      - bunks
      - email
      - id
      - is_staff
      - is_superuser
      - password
      - unit
      - unit_bunks
    AuthToken:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        token:
          type: string
          readOnly: true
      required:
      - password
      - token
      - username
    BlankEnum:
      enum:
      - ''
    Bunk:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        unit:
          $ref: '#/components/schemas/Unit'
        cabin:
          $ref: '#/components/schemas/Cabin'
        session:
          $ref: '#/components/schemas/Session'
        counselors:
          type: array
          items:
            $ref: '#/components/schemas/SimpleUser'
          readOnly: true
        is_test_data:
          type: boolean
          description: Mark this record as test/dummy data. Test data can be easily
            identified and deleted in bulk.
        is_active:
          type: boolean
          title: Active
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - cabin
      - counselors
      - created_at
      - id
      - session
      - unit
      - updated_at
    BunkLog:
      type: object
      description: |-
        Serializer for BunkLog model.
        For POST requests, you need to provide:
        - date
        - bunk_assignment (id)
        - other fields as needed
        Note: counselor is automatically set to the current user
      properties:
        id:
          type: integer
          readOnly: true
        counselor:
          type: integer
          readOnly: true
        is_test_data:
          type: boolean
          description: Mark this record as test/dummy data. Test data can be easily
            identified and deleted in bulk.
        date:
          type: string
          format: date
        not_on_camp:
          type: boolean
        social_score:
          type: integer
          maximum: 5
          minimum: 1
          nullable: true
        behavior_score:
          type: integer
          maximum: 5
          minimum: 1
          nullable: true
        participation_score:
          type: integer
          maximum: 5
          minimum: 1
          nullable: true
        request_camper_care_help:
          type: boolean
        request_unit_head_help:
          type: boolean
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        bunk_assignment:
          type: integer
      required:
      - bunk_assignment
      - counselor
      - created_at
      - date
      - id
      - updated_at
    Cabin:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        is_test_data:
          type: boolean
          description: Mark this record as test/dummy data. Test data can be easily
            identified and deleted in bulk.
        name:
          type: string
          maxLength: 100
        capacity:
          type: integer
          maximum: 2147483647
          minimum: 0
        location:
          type: string
          maxLength: 255
        notes:
          type: string
      required:
      - capacity
      - id
      - name
    Camper:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100
        date_of_birth:
          type: string
          format: date
          nullable: true
        emergency_contact_name:
          type: string
          maxLength: 255
        emergency_contact_phone:
          type: string
          maxLength: 20
        camper_notes:
          type: string
      required:
      - first_name
      - id
      - last_name
    CamperBunkAssignment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        bunk:
          $ref: '#/components/schemas/SimpleBunk'
        camper:
          $ref: '#/components/schemas/Camper'
      required:
      - bunk
      - camper
      - id
    CustomTokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    Item:
      type: object
      description: Serializer for Item model.
      properties:
        id:
          type: integer
          readOnly: true
        item_name:
          type: string
          maxLength: 100
        item_description:
          type: string
        available:
          type: boolean
        item_category:
          type: integer
        item_category_name:
          type: string
          readOnly: true
      required:
      - id
      - item_category
      - item_category_name
      - item_description
      - item_name
    ItemCategory:
      type: object
      description: Serializer for ItemCategory model.
      properties:
        id:
          type: integer
          readOnly: true
        category_name:
          type: string
          maxLength: 100
        category_description:
          type: string
      required:
      - category_description
      - category_name
      - id
    Order:
      type: object
      description: Serializer for Order model.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        user_email:
          type: string
          readOnly: true
        user_name:
          type: string
          readOnly: true
        order_date:
          type: string
          format: date-time
          readOnly: true
        order_status:
          $ref: '#/components/schemas/OrderStatusEnum'
        order_status_display:
          type: string
          readOnly: true
        order_bunk:
          type: integer
        order_bunk_name:
          type: string
          readOnly: true
        order_bunk_cabin:
          type: string
          readOnly: true
        order_bunk_session:
          type: string
          readOnly: true
        order_type:
          type: integer
        order_type_name:
          type: string
          readOnly: true
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
      required:
      - id
      - order_bunk
      - order_bunk_cabin
      - order_bunk_name
      - order_bunk_session
      - order_date
      - order_items
      - order_status_display
      - order_type
      - order_type_name
      - user
      - user_email
      - user_name
    OrderCreate:
      type: object
      description: Serializer for creating orders with order items.
      properties:
        order_status:
          $ref: '#/components/schemas/OrderStatusEnum'
        order_bunk:
          type: integer
        order_type:
          type: integer
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
      required:
      - order_bunk
      - order_items
      - order_type
    OrderItem:
      type: object
      description: Serializer for OrderItem model.
      properties:
        id:
          type: integer
          readOnly: true
        item:
          type: integer
          nullable: true
        item_name:
          type: string
          readOnly: true
        item_description:
          type: string
          readOnly: true
        item_quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - id
      - item_description
      - item_name
      - item_quantity
    OrderStatusEnum:
      enum:
      - submitted
      - pending
      - completed
      - cancelled
      type: string
      description: |-
        * `submitted` - Submitted
        * `pending` - Pending
        * `completed` - Completed
        * `cancelled` - Cancelled
    OrderType:
      type: object
      description: Serializer for OrderType model.
      properties:
        id:
          type: integer
          readOnly: true
        type_name:
          type: string
          maxLength: 100
        type_description:
          type: string
        item_categories:
          type: array
          items:
            $ref: '#/components/schemas/ItemCategory'
          readOnly: true
        item_category_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
      required:
      - id
      - item_categories
      - item_category_ids
      - type_description
      - type_name
    PatchedBunk:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        unit:
          $ref: '#/components/schemas/Unit'
        cabin:
          $ref: '#/components/schemas/Cabin'
        session:
          $ref: '#/components/schemas/Session'
        counselors:
          type: array
          items:
            $ref: '#/components/schemas/SimpleUser'
          readOnly: true
        is_test_data:
          type: boolean
          description: Mark this record as test/dummy data. Test data can be easily
            identified and deleted in bulk.
        is_active:
          type: boolean
          title: Active
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedBunkLog:
      type: object
      description: |-
        Serializer for BunkLog model.
        For POST requests, you need to provide:
        - date
        - bunk_assignment (id)
        - other fields as needed
        Note: counselor is automatically set to the current user
      properties:
        id:
          type: integer
          readOnly: true
        counselor:
          type: integer
          readOnly: true
        is_test_data:
          type: boolean
          description: Mark this record as test/dummy data. Test data can be easily
            identified and deleted in bulk.
        date:
          type: string
          format: date
        not_on_camp:
          type: boolean
        social_score:
          type: integer
          maximum: 5
          minimum: 1
          nullable: true
        behavior_score:
          type: integer
          maximum: 5
          minimum: 1
          nullable: true
        participation_score:
          type: integer
          maximum: 5
          minimum: 1
          nullable: true
        request_camper_care_help:
          type: boolean
        request_unit_head_help:
          type: boolean
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        bunk_assignment:
          type: integer
    PatchedCamper:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100
        date_of_birth:
          type: string
          format: date
          nullable: true
        emergency_contact_name:
          type: string
          maxLength: 255
        emergency_contact_phone:
          type: string
          maxLength: 20
        camper_notes:
          type: string
    PatchedCamperBunkAssignment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        bunk:
          $ref: '#/components/schemas/SimpleBunk'
        camper:
          $ref: '#/components/schemas/Camper'
    PatchedItem:
      type: object
      description: Serializer for Item model.
      properties:
        id:
          type: integer
          readOnly: true
        item_name:
          type: string
          maxLength: 100
        item_description:
          type: string
        available:
          type: boolean
        item_category:
          type: integer
        item_category_name:
          type: string
          readOnly: true
    PatchedItemCategory:
      type: object
      description: Serializer for ItemCategory model.
      properties:
        id:
          type: integer
          readOnly: true
        category_name:
          type: string
          maxLength: 100
        category_description:
          type: string
    PatchedOrder:
      type: object
      description: Serializer for Order model.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        user_email:
          type: string
          readOnly: true
        user_name:
          type: string
          readOnly: true
        order_date:
          type: string
          format: date-time
          readOnly: true
        order_status:
          $ref: '#/components/schemas/OrderStatusEnum'
        order_status_display:
          type: string
          readOnly: true
        order_bunk:
          type: integer
        order_bunk_name:
          type: string
          readOnly: true
        order_bunk_cabin:
          type: string
          readOnly: true
        order_bunk_session:
          type: string
          readOnly: true
        order_type:
          type: integer
        order_type_name:
          type: string
          readOnly: true
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
    PatchedOrderType:
      type: object
      description: Serializer for OrderType model.
      properties:
        id:
          type: integer
          readOnly: true
        type_name:
          type: string
          maxLength: 100
        type_description:
          type: string
        item_categories:
          type: array
          items:
            $ref: '#/components/schemas/ItemCategory'
          readOnly: true
        item_category_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
    PatchedUnit:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        unit_head_details:
          type: object
          additionalProperties: {}
          readOnly: true
        camper_care_details:
          type: object
          additionalProperties: {}
          readOnly: true
        staff_assignments:
          type: object
          additionalProperties: {}
          readOnly: true
        unit_heads:
          type: object
          additionalProperties: {}
          readOnly: true
        camper_care_staff:
          type: object
          additionalProperties: {}
          readOnly: true
    PatchedUnitStaffAssignment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        unit:
          type: integer
        staff_member:
          type: integer
        staff_member_name:
          type: string
          readOnly: true
        staff_member_details:
          type: object
          additionalProperties: {}
          readOnly: true
        role:
          $ref: '#/components/schemas/UnitStaffRoleEnum'
        role_display:
          type: string
          readOnly: true
        is_primary:
          type: boolean
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    Session:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        is_test_data:
          type: boolean
          description: Mark this record as test/dummy data. Test data can be easily
            identified and deleted in bulk.
        name:
          type: string
          maxLength: 100
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        is_active:
          type: boolean
      required:
      - end_date
      - id
      - name
      - start_date
    SimpleBunk:
      type: object
      properties:
        counselors:
          type: array
          items:
            $ref: '#/components/schemas/SimpleUser'
          readOnly: true
        session:
          $ref: '#/components/schemas/Session'
        unit:
          $ref: '#/components/schemas/SimpleUnit'
        cabin:
          $ref: '#/components/schemas/Cabin'
        id:
          type: integer
          readOnly: true
      required:
      - cabin
      - counselors
      - id
      - session
      - unit
    SimpleUnit:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        unit_head:
          type: object
          additionalProperties: {}
          readOnly: true
        camper_care:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - camper_care
      - id
      - name
      - unit_head
    SimpleUser:
      type: object
      properties:
        first_name:
          type: string
          title: First Name of User
          maxLength: 255
        last_name:
          type: string
          title: Last Name of User
          maxLength: 255
        role:
          oneOf:
          - $ref: '#/components/schemas/UserRoleEnum'
          - $ref: '#/components/schemas/BlankEnum'
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - email
      - id
    SocialAppDiagnostic:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        client_id:
          type: string
        created:
          type: string
      required:
      - client_id
      - created
      - id
      - name
    SocialAppDiagnosticResponse:
      type: object
      properties:
        count:
          type: integer
        message:
          type: string
        google_apps:
          type: array
          items:
            $ref: '#/components/schemas/SocialAppDiagnostic'
      required:
      - count
      - google_apps
      - message
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    Unit:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        unit_head_details:
          type: object
          additionalProperties: {}
          readOnly: true
        camper_care_details:
          type: object
          additionalProperties: {}
          readOnly: true
        staff_assignments:
          type: object
          additionalProperties: {}
          readOnly: true
        unit_heads:
          type: object
          additionalProperties: {}
          readOnly: true
        camper_care_staff:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - camper_care_details
      - camper_care_staff
      - created_at
      - id
      - name
      - staff_assignments
      - unit_head_details
      - unit_heads
      - updated_at
    UnitStaffAssignment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        unit:
          type: integer
        staff_member:
          type: integer
        staff_member_name:
          type: string
          readOnly: true
        staff_member_details:
          type: object
          additionalProperties: {}
          readOnly: true
        role:
          $ref: '#/components/schemas/UnitStaffRoleEnum'
        role_display:
          type: string
          readOnly: true
        is_primary:
          type: boolean
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - role
      - role_display
      - staff_member
      - staff_member_details
      - staff_member_name
      - unit
      - updated_at
    UnitStaffRoleEnum:
      enum:
      - unit_head
      - camper_care
      type: string
      description: |-
        * `unit_head` - Unit Head
        * `camper_care` - Camper Care
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          title: First Name of User
          maxLength: 255
        last_name:
          type: string
          title: Last Name of User
          maxLength: 255
        role:
          oneOf:
          - $ref: '#/components/schemas/UserRoleEnum'
          - $ref: '#/components/schemas/BlankEnum'
        is_active:
          type: boolean
          readOnly: true
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        is_staff:
          type: boolean
          readOnly: true
          title: Staff status
          description: Designates whether the user can log into this admin site.
        profile_complete:
          type: boolean
        bunks:
          type: object
          additionalProperties: {}
          readOnly: true
        units:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - bunks
      - email
      - id
      - is_active
      - is_staff
      - units
    UserRoleEnum:
      enum:
      - Admin
      - Camper Care
      - Unit Head
      - Counselor
      type: string
      description: |-
        * `Admin` - Admin
        * `Camper Care` - Camper Care
        * `Unit Head` - Unit Head
        * `Counselor` - Counselor
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
