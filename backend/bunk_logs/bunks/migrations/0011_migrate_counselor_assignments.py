# Generated by Django manually

from django.db import migrations
from django.utils import timezone


def migrate_existing_assignments(apps, schema_editor):
    """
    Migrate existing counselor assignments from ManyToMany to CounselorBunkAssignment
    """
    Bunk = apps.get_model('bunks', 'Bunk')
    CounselorBunkAssignment = apps.get_model('bunks', 'CounselorBunkAssignment')
    
    # Get current date for start_date
    current_date = timezone.now().date()
    
    for bunk in Bunk.objects.all():
        counselors = bunk.counselors.all()
        
        for i, counselor in enumerate(counselors):
            # Make the first counselor primary for each bunk
            is_primary = (i == 0)
            
            CounselorBunkAssignment.objects.create(
                counselor=counselor,
                bunk=bunk,
                start_date=current_date,
                end_date=None,  # Open-ended assignment
                is_primary=is_primary
            )


def reverse_migration(apps, schema_editor):
    """
    Reverse migration - restore counselor assignments to ManyToMany
    """
    Bunk = apps.get_model('bunks', 'Bunk')
    CounselorBunkAssignment = apps.get_model('bunks', 'CounselorBunkAssignment')
    
    for bunk in Bunk.objects.all():
        # Get all counselors from assignments
        assignments = CounselorBunkAssignment.objects.filter(bunk=bunk)
        counselors = [assignment.counselor for assignment in assignments]
        
        # Add them back to the ManyToMany field
        bunk.counselors.set(counselors)
    
    # Clear all assignments
    CounselorBunkAssignment.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('bunks', '0010_create_counselor_bunk_assignment'),
    ]

    operations = [
        migrations.RunPython(migrate_existing_assignments, reverse_migration),
    ]
