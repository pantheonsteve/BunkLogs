# filepath: /Users/stevebresnick/Projects/BunkLogs/backend/bunk_logs/orders/admin.py.new
from django.contrib import admin
from django.urls import path
from django.urls import reverse
from django.utils.html import format_html

from .models import Order, OrderItem, Item, OrderType, ItemCategory, BunkLogsOrderTypeItemCategory

# Custom admin for import feature
class ImportAdminMixin:
    """Mixin for import functionality in admin"""
    change_list_template = 'admin/orders/change_list.html'
    
    def get_urls(self):
        """Add import URL to admin URLs"""
        urls = super().get_urls()
        model_name = self.model._meta.model_name
        custom_urls = [
            path('import/', self.admin_site.admin_view(self.import_view),
                name=f'orders_{model_name}_import'),
        ]
        return custom_urls + urls
    
    def changelist_view(self, request, extra_context=None):
        """Add the import button to the changelist view"""
        extra_context = extra_context or {}
        model_name = self.model._meta.model_name
        url_name = f'admin:orders_{model_name}_import'
        try:
            extra_context['import_url'] = reverse(url_name)
        except Exception:
            # If the URL can't be reversed, don't show the button
            pass
        return super().changelist_view(request, extra_context=extra_context)

# Inline classes first
class OrderItemInline(admin.TabularInline):
    """Inline admin for OrderItems in an Order"""
    model = OrderItem
    extra = 1
    # Using a regular dropdown for item selection
    raw_id_fields = ('item',)

class CategoryInline(admin.TabularInline):
    """Inline admin for the relationship between OrderType and ItemCategory"""
    model = BunkLogsOrderTypeItemCategory
    extra = 1
    verbose_name = "Item Category"
    verbose_name_plural = "Item Categories"

@admin.register(Order)
class OrderAdmin(ImportAdminMixin, admin.ModelAdmin):
    list_display = ('id', 'user', 'order_date', 'order_bunk', 'order_status')
    search_fields = ('user__email', 'order_status')
    list_filter = ('order_status', 'order_date', 'order_type', 'order_bunk')
    ordering = ('-order_date',)
    readonly_fields = ('order_date', 'user_email')
    fieldsets = (
        (None, {
            'fields': ('user', 'order_date', 'order_status', 'order_bunk')
        }),
        ('Order Details', {
            'fields': ('order_type',)
        }),
    )
    inlines = [OrderItemInline]
    
    def user_email(self, obj):
        return obj.user.email if obj.user else 'N/A'
    user_email.short_description = 'User Email'
    user_email.admin_order_field = 'user__email'
    
    def import_view(self, request):
        """View for importing orders"""
        from .import_views import import_orders
        return import_orders(request)

@admin.register(Item)
class ItemAdmin(ImportAdminMixin, admin.ModelAdmin):
    list_display = ('id', 'item_name', 'available', 'item_category')
    search_fields = ('item_name', 'item_category__category_name')
    list_filter = ('available', 'item_category')
    ordering = ('item_name',)
    fieldsets = (
        (None, {
            'fields': ('item_name', 'item_description', 'available', 'item_category')
        }),
    )
    
    def import_view(self, request):
        """View for importing items"""
        from .import_views import import_items
        return import_items(request)

@admin.register(OrderType)
class OrderTypeAdmin(admin.ModelAdmin):
    list_display = ('id', 'type_name', 'get_categories')
    search_fields = ('type_name',)
    ordering = ('type_name',)
    fieldsets = (
        (None, {
            'fields': ('type_name', 'type_description')
        }),
    )
    inlines = [CategoryInline]

    def get_categories(self, obj):
        """Return a list of categories for display in the admin"""
        return ", ".join([c.category_name for c in obj.item_categories.all()[:5]])
    get_categories.short_description = "Categories"

@admin.register(ItemCategory)
class ItemCategoryAdmin(ImportAdminMixin, admin.ModelAdmin):
    list_display = ('id', 'category_name')
    search_fields = ('category_name',)
    ordering = ('category_name',)
    fieldsets = (
        (None, {
            'fields': ('category_name', 'category_description')
        }),
    )
    
    def import_view(self, request):
        """View for importing item categories"""
        from .import_views import import_item_categories
        return import_item_categories(request)
