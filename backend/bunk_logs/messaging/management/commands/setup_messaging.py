from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import date, timedelta

from bunk_logs.messaging.models import EmailTemplate, EmailRecipientGroup, EmailRecipient, EmailSchedule


class Command(BaseCommand):
    help = 'Set up initial messaging data including templates and recipient groups'
    
    def handle(self, *args, **options):
        self.stdout.write('Setting up initial messaging data...')
        
        # Create email recipient groups
        daily_reports_group, created = EmailRecipientGroup.objects.get_or_create(
            name='daily-reports',
            defaults={
                'description': 'Recipients for daily order reports',
                'is_active': True
            }
        )
        if created:
            self.stdout.write(f'✓ Created recipient group: {daily_reports_group.name}')
        
        management_group, created = EmailRecipientGroup.objects.get_or_create(
            name='management',
            defaults={
                'description': 'Management team recipients',
                'is_active': True
            }
        )
        if created:
            self.stdout.write(f'✓ Created recipient group: {management_group.name}')
        
        # Create sample recipients (you can customize these)
        sample_recipients = [
            {
                'email': 'manager@bunkcamp.com',
                'name': 'Camp Manager',
                'group': daily_reports_group
            },
            {
                'email': 'maintenance@bunkcamp.com', 
                'name': 'Maintenance Team',
                'group': daily_reports_group
            },
            {
                'email': 'director@bunkcamp.com',
                'name': 'Camp Director', 
                'group': management_group
            }
        ]
        
        for recipient_data in sample_recipients:
            recipient, created = EmailRecipient.objects.get_or_create(
                email=recipient_data['email'],
                group=recipient_data['group'],
                defaults={
                    'name': recipient_data['name'],
                    'is_active': True
                }
            )
            if created:
                self.stdout.write(f'✓ Created recipient: {recipient.name} <{recipient.email}>')
        
        # Create email templates
        daily_orders_template, created = EmailTemplate.objects.get_or_create(
            name='daily-orders-report',
            defaults={
                'subject_template': 'Daily Orders Report - {{ date|date:"F j, Y" }}{% if total_orders == 0 %} (No Orders){% else %} ({{ total_orders }} Orders){% endif %}',
                'html_template': '''<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Daily Orders Report</title>
</head>
<body>
    <h1>Daily Orders Report</h1>
    <p><strong>Date:</strong> {{ date|date:"F j, Y" }}</p>
    
    <h2>Summary</h2>
    <ul>
        <li>Total Orders: {{ total_orders }}</li>
        <li>Maintenance Requests: {{ maintenance_count }}</li>
        <li>Camper Care Requests: {{ camper_care_count }}</li>
    </ul>
    
    {% if has_orders %}
        <h2>Details</h2>
        <p>See the attached detailed report for complete order information.</p>
    {% else %}
        <p>No orders were submitted today.</p>
    {% endif %}
    
    <p><small>Generated by {{ site_name|default:"BunkLogs" }}</small></p>
</body>
</html>''',
                'text_template': '''Daily Orders Report - {{ date|date:"F j, Y" }}

Summary:
- Total Orders: {{ total_orders }}
- Maintenance Requests: {{ maintenance_count }}
- Camper Care Requests: {{ camper_care_count }}

{% if has_orders %}Details available in the web interface.{% else %}No orders were submitted today.{% endif %}

Generated by {{ site_name|default:"BunkLogs" }}''',
                'description': 'Template for daily orders summary emails',
                'is_active': True
            }
        )
        if created:
            self.stdout.write(f'✓ Created email template: {daily_orders_template.name}')
        
        # Create email schedule
        daily_schedule, created = EmailSchedule.objects.get_or_create(
            name='daily-orders-report',
            defaults={
                'template': daily_orders_template,
                'recipient_group': daily_reports_group,
                'cron_expression': '0 8 * * *',  # Daily at 8 AM
                'is_active': True
            }
        )
        if created:
            self.stdout.write(f'✓ Created email schedule: {daily_schedule.name}')
        
        self.stdout.write(self.style.SUCCESS('\n✅ Initial messaging setup complete!'))
        self.stdout.write('\nNext steps:')
        self.stdout.write('1. Configure your Mailgun settings in environment variables')
        self.stdout.write('2. Test the email service: python manage.py test_email_service --to your@email.com')
        self.stdout.write('3. Preview a daily report: python manage.py preview_daily_report --open-browser')
        self.stdout.write('4. Send a test report: python manage.py send_daily_reports --dry-run')
