# Ultra-optimized Dockerfile for Elastic Beanstalk
# Target: Sub-10 minute builds vs 25+ minutes
FROM python:3.12.9-slim-bookworm AS builder

# Install minimal build dependencies in single layer
RUN apt-get update && apt-get install --no-install-recommends -y \
    build-essential \
    libpq-dev \
    libjpeg-dev \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# Upgrade pip toolchain once
RUN pip install --no-cache-dir --upgrade pip==24.3.1 wheel==0.44.0 setuptools==75.1.0

# Copy and install requirements in optimal order
COPY requirements/production.txt /tmp/requirements.txt
RUN pip wheel --wheel-dir /wheels --no-cache-dir --no-deps -r /tmp/requirements.txt

# Production stage - minimal runtime
FROM python:3.12.9-slim-bookworm

# Set all env vars in one layer
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

WORKDIR /app

# Install only essential runtime libraries
RUN apt-get update && apt-get install --no-install-recommends -y \
    libpq5 \
    libjpeg62-turbo \
    zlib1g \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install pre-built wheels (fastest method)
COPY --from=builder /wheels /wheels
RUN pip install --no-cache-dir --no-index --find-links=/wheels /wheels/* \
    && rm -rf /wheels

# Copy application last for better cache hits
COPY . /app/

# Optimize in single layer
RUN mkdir -p /app/staticfiles /app/media \
    && find /app -name "*.pyc" -delete \
    && find /app -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# Minimal startup script for faster container start
RUN printf '#!/bin/bash\nset -e\necho "Starting Django..."\npython manage.py migrate --noinput --verbosity=0 2>/dev/null || true\npython manage.py collectstatic --noinput --clear --verbosity=0 2>/dev/null || true\nexec gunicorn --bind 0.0.0.0:8000 --workers 2 --timeout 120 --preload config.wsgi:application\n' > /app/start.sh && chmod +x /app/start.sh

EXPOSE 8000
CMD ["/app/start.sh"]
