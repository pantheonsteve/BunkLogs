#!/bin/bash
# backend/compose/production/django/start-w-dd

set -o errexit
set -o pipefail
set -o nounset

echo "Starting Django application with Datadog monitoring..."

# Datadog Agent Configuration for Render Private Service
export DD_AGENT_HOST="${DD_AGENT_HOST:-datadog-agent}"  # Your Datadog service name on Render
export DD_TRACE_AGENT_URL="${DD_TRACE_AGENT_URL:-http://datadog-agent:8126}"

# Set default values for Datadog environment variables
export DD_SERVICE="${DD_SERVICE:-bunk-logs-backend}"
export DD_ENV="${DD_ENV:-production}"
export DD_VERSION="${DD_VERSION:-1.0.0}"

# Enable Datadog features
export DD_LOGS_INJECTION=true
export DD_TRACE_ENABLED=true

# Django-specific Datadog configuration
export DD_DJANGO_USE_HANDLER_RESOURCE_FORMAT=true
export DD_DJANGO_USE_LEGACY_RESOURCE_FORMAT=false
export DD_DJANGO_INSTRUMENT_TEMPLATES=true
export DD_DJANGO_CACHE_SERVICE_NAME="${DD_SERVICE}-cache"
export DD_DJANGO_DATABASE_SERVICE_NAME="${DD_SERVICE}-db"

# Database tracing
export DD_TRACE_DJANGO_DATABASE_SERVICE_NAME_PREFIX="${DD_SERVICE}"

echo "Datadog Configuration:"
echo "  Service: $DD_SERVICE"
echo "  Environment: $DD_ENV"
echo "  Version: $DD_VERSION"
echo "  Agent URL: $DD_TRACE_AGENT_URL"

echo "Collecting static files..."
python /app/manage.py collectstatic --noinput

# Health check for Datadog tracer
echo "Checking Datadog tracer configuration..."
ddtrace-run --info || echo "Warning: ddtrace-run --info failed, but continuing..."

# Start Gunicorn with Datadog tracing
echo "Starting Gunicorn with Datadog instrumentation..."

exec ddtrace-run /usr/local/bin/gunicorn config.wsgi \
    --bind 0.0.0.0:$PORT \
    --chdir=/app \
    --workers=2 \
    --worker-class=sync \
    --worker-connections=1000 \
    --max-requests=1000 \
    --max-requests-jitter=100 \
    --timeout=30 \
    --keep-alive=5 \
    --log-level=info \
    --access-logfile=- \
    --error-logfile=-